#pragma once

namespace pos::ui::box {

///////////////////////////////////////////////////////////////////////////
/// \brief Simplifies the usage of a Qt text box to write read only text
/// \ingroup ecs
///
/// \include ATextBox.hpp <POS/UI/ATextBox.hpp>
///
///////////////////////////////////////////////////////////////////////////
class ATextBox
    : public ::QTextEdit
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// forward to the other constructor while passing null valuesa
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit ATextBox(
        ::QMainWindow& window
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Sets all variables except the string
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit ATextBox(
        ::QMainWindow& window,
        ::std::size_t xPos,
        ::std::size_t yPos,
        ::std::size_t xSize,
        ::std::size_t ySize,
        bool readOnly = true
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~ATextBox() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ATextBox(
        const ATextBox& other
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const ATextBox& other
    ) noexcept
        -> ATextBox& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ATextBox(
        ATextBox& that
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        ATextBox& that
    ) noexcept
        -> ATextBox = delete;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Accessors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief add text at the end of the line
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addText(
        const ::std::string& line
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief add new line to the current text
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addLine(
        const ::std::string& line
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief clear all current lines
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clearLine();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief prints in Qt
    ///
    ///////////////////////////////////////////////////////////////////////////
    void print();

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setPosition(
        ::std::size_t xPos,
        ::std::size_t yPos
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void resize(
        ::std::size_t xSize,
        ::std::size_t ySize
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getText() const
        -> ::std::string;



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Helpers
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the geometry according to the value of the variables
    ///
    ///////////////////////////////////////////////////////////////////////////
    void updateGeometry();



private:

    ::std::size_t m_xPos;
    ::std::size_t m_yPos;
    ::std::size_t m_xSize;
    ::std::size_t m_ySize;
    ::std::vector<::std::string> m_lines;

};

} // namespace pos::ui::box

namespace pos::ui { using ATextBox = pos::ui::box::ATextBox; }
